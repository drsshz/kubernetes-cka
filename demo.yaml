---
apiVersion: v1
kind: Namespace
metadata:
  name: demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-deploy
  namespace: demo
spec:
  replicas: 1
  selector:
    matchLabels: { app: example }
  template:
    metadata:
      labels: { app: example }
    spec:
      containers:
      - name: web
        image: hashicorp/http-echo:1.0
        args: ["-text=Hello from example-service"]
        ports: [{ containerPort: 5678 }]
---
apiVersion: v1
kind: Service
metadata:
  name: example-service
  namespace: demo
  labels: { run: example-pod }
spec:
  type: ClusterIP
  selector: { app: example }
  ports:
  - name: http
    port: 80
    targetPort: 5678
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kplabs-deploy
  namespace: demo
spec:
  replicas: 1
  selector:
    matchLabels: { app: kplabs }
  template:
    metadata:
      labels: { app: kplabs }
    spec:
      containers:
      - name: web
        image: hashicorp/http-echo:1.0
        args: ["-text=Hello from kplabs-service"]
        ports: [{ containerPort: 5678 }]
---
apiVersion: v1
kind: Service
metadata:
  name: kplabs-service
  namespace: demo
spec:
  type: ClusterIP
  selector: { app: kplabs }
  ports:
  - name: http
    port: 80
    targetPort: 5678
---
# Ingress via Traefik (built into k3s/k3d)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: main-ingress
  namespace: demo
  annotations:
    # optional: force Traefik, useful if you also experiment with nginx later
    kubernetes.io/ingress.class: traefik
spec:
  ingressClassName: traefik
  rules:
  - host: example.internal
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: example-service
            port:
              number: 80
  - host: kplabs.internal
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kplabs-service
            port:
              number: 80

